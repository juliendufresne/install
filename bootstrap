#!/usr/bin/env bash

# this file should be the only file required to install everything.
# It will clone the entire project and run it

set -euo pipefail
IFS=$'\n\t'

function main()
{
    declare -r current_script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    title 'Bootstrap installation'

    check_requirements

    [[ -v USER ]] || USER="$(whoami)"
    if [[ "$USER" = "root" ]]
    then
        error "You should not run this script as root."

        return 1
    fi

    add_current_user_to_sudoers "$USER"
    install_project

    title 'Run install script'
    /usr/bin/env bash "$HOME/install/src/install" || return "$?"

    return 0
}
readonly -f "main"

function check_requirements()
{
    declare    has_errors=false
    declare -r check_ok="\e[32m\xE2\x9C\x94\e[39m"
    declare -r check_fail="\e[31m\xE2\x9C\x98\e[39m"

    section "Check script requirements"

    for package in 'apt-get' 'dpkg'
    do
        if hash "$package" &>/dev/null
        then
            printf " %b package %s\n" "$check_ok" "$package"
        else
            has_errors=true
            printf " %b package %s\n" "$check_fail" "$package"
        fi
    done

    declare -r current_bash_version="$(dpkg -s bash | grep -E "^Version:" | sed -e "s/Version:\s*//")"
    declare -r current_bash_major_version="$(echo "$current_bash_version" | grep -E -o "^[0-9]+")"

    if [[ "$current_bash_major_version" -ge 4 ]]
    then
        printf " %b bash v4+\n" "$check_ok"
    else
        has_errors=true
        printf " %b bash v4+ (current version: %s)\n" "$check_fail" "$current_bash_version"
    fi

    printf "\n"
    if ${has_errors}
    then
        error "Some required tools are missing"

        return 1
    fi

    return 0
}

function add_current_user_to_sudoers()
{
    section 'sudo'

    declare -r user="$1"

    declare -r sudoers_dir='/etc/sudoers.d'
    declare -r sudoers_file="${sudoers_dir}/$(echo "$user" | iconv -f utf8 -t ascii//TRANSLIT | tr '[:upper:]' '[:lower:]' | sed -e 's/\s//g' -e 's/[^a-z0-9]//g')"
    declare -r sudoers_file_content="$user ALL=(ALL) NOPASSWD: ALL"

    if hash 'sudo' &>/dev/null && sudo -l -U "$user" | grep -q 'NOPASSWD:' &>/dev/null
    then
        success 'Already in the sudoers'

        return 0
    fi

    note 'Root password may be required.'

    if ! hash "sudo" &>/dev/null
    then
        printf '   install sudo\n'
        su -c "
apt-get install --yes -qq sudo
mkdir -p \"$sudoers_dir\"
printf '%s\n' \"$sudoers_file_content\" > \"$sudoers_file\"
"
    # mainly for debian if sudo has been installed without adding user to sudoers
    elif ! hash 'visudo' &>/dev/null
    then
        su -c "
mkdir -p \"$sudoers_dir\"
printf '%s\n' \"$sudoers_file_content\" > \"$sudoers_file\"
"
    else
        printf '%s\n' "$sudoers_file_content" | sudo EDITOR='tee' visudo -f "$sudoers_file" >/dev/null
    fi

    success "User $user is registered in the sudoers"

    return 0
}

function install_project()
{
    section 'Prepare project'

    if ! hash 'git' &>/dev/null
    then
        note 'Installing git.'
        sudo apt-get install --yes -qq git
    fi

    if ! [[ -d "$HOME/install" ]]
    then
        note "Cloning project into $HOME/install."
        git clone --quiet https://github.com/juliendufresne/install.git "$HOME/install"
    fi

    success "Project has been setup correctly into $HOME/install."

    return 0
}

# output management

function title()
{
    header '=' "${1:-}"
}

function section()
{
    header '-' "${1:-}"
}

function header()
{
    declare -r underline_char="$1"
    declare -r text="$2"

    declare -r -i text_length="$(echo -ne "$text" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" | wc -c)"
    declare -r pad="$(printf %${text_length}s|tr ' ' "$underline_char")"

    printf '\e[34m%b\e[39m\n' "$text"
    printf '\e[34m%*.*s\e[39m\n' '0' "$text_length" "$pad"
    printf '\n'
}

function success()
{
    block " " "OK" "\e[37;42m" false "$@"
}

function error()
{
    block " " "ERROR" "\e[37;41m" true "$@"
}

function note()
{
    block " ! " "NOTE" "\e[33m" false "$@"
}

function block()
{
    declare -r prefix="$1"
    declare    type="$2"
    declare -r color="$3"
    declare -r is_error="$4"
    shift
    shift
    shift
    shift

    declare -r    color_reset="\e[39;49m"
    declare -r -i terminal_length="$(tput cols)"
    declare -r    pad="$(printf "%${terminal_length}s")"
    declare       file_descriptor="/dev/stdout"
    declare -r -i prefix_length="$(echo -ne "$prefix" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" | wc -c)"
    declare -i    type_length=0
    declare       empty_type=""

    if ${is_error}
    then
        file_descriptor="/dev/stderr"
    fi

    if [[ "${#type}" -gt 0 ]]
    then
        type="[$type] "
        type_length="$(echo -ne "$type" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" | wc -c)"
        printf -v empty_type '%*.*s' '0' "$type_length" "$pad"
    fi

    declare -r -i fold_length="$((terminal_length - prefix_length - type_length))"

    printf '\n' >"$file_descriptor"
    printf '%b%*.*s%b\n' "$color" '0' "$terminal_length" "$pad" "$color_reset" >"$file_descriptor"
    if [[ $# -eq 0 ]]
    then
        printf '%b%b%b%*.*s%b\n' "$color" "$prefix" "$type" '0' "$((fold_length))" "$pad" "$color_reset" >"$file_descriptor"
    else
        declare is_first_line=true
        for message in "$@"
        do
            while read output
            do
                if ${is_first_line}
                then
                    printf '%b%b%b' "$color" "$prefix" "$type" >"$file_descriptor"
                    is_first_line=false
                else
                    printf '%b%b%b' "$color" "$prefix" "$empty_type" >"$file_descriptor"
                fi

                printf '%b%*.*s%b\n' "$output" '0' "$((fold_length - ${#output}))" "$pad" "$color_reset" >"$file_descriptor"
            done <<< "$(echo -ne "$message" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" | fold --spaces --bytes --width="$fold_length")"
        done
    fi
    printf '%b%*.*s%b\n' "$color" '0' "$terminal_length" "$pad" "$color_reset" >"$file_descriptor"
    printf '\n' >"$file_descriptor"
}

main
